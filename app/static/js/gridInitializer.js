// import { ruRU } from "gridjs/l10n";
// import { Grid, html } from "gridjs";
const Grid = window.gridjs.Grid;
const html = window.gridjs.html;

const queryFilterString = document.getElementById('table').getAttribute('query-filter');
const queryFilterObject = JSON.parse(queryFilterString);
const tableLabel = queryFilterObject.table_label;
const modelName = queryFilterObject.model_name;

console.log(queryFilterObject.column); // –í—ã–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞ "column"
console.log(queryFilterObject.value); // –í—ã–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞ "value"


console.log('typeof queryFilterObject:', typeof queryFilterObject);
console.log('–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è queryFilterObject:', queryFilterObject);

// console.log('–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è tableName:', tableName);
// console.log('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã:', tableLabel);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–∞–ø—Ä–æ—Å–∞
const updateUrl = (prev, query) => {
    return (
        prev +
        (prev.indexOf("?") >= 0 ? "&" : "?") +
        new URLSearchParams(query).toString()
    );
};
 
var columns;
fetch(`/api/data`, {
    method: 'POST',
    headers: {
    'Content-Type': 'application/json',
    },
    body: JSON.stringify(queryFilterObject),
    })
    .then(response => response.json())
    .then(data => {
        columns = data.columns;
        const columnList = columns.map(column => column.id);

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª–µ–π
        console.log('–ù–∞–∑–≤–∞–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π:');
        columns.forEach(column => {
            console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${column.name}, –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${column.header}`);
        });

        const tableTitle = document.createElement('div');
        tableTitle.textContent = tableLabel;
        tableTitle.className = 'table-title';
        document.getElementById('table').insertAdjacentElement('beforebegin', tableTitle);

        data.data.forEach(row => {
            console.log(row);
        });
        

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        function formatDateTime(date) {
            return date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric' }) + '   ' + date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
        };

        function convertBooleanFields(isChecked) {
            console.log('–¢–∏–ø –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π item:', typeof isChecked);
            console.log('–ó–Ω–∞—á–µ–Ω–∏–µ item:', isChecked);
            const formattedValue = isChecked ? '<span class="icon-checkmark">‚úîÔ∏è</span>' : '<span class="icon-checkmark">‚ùå</span>';

            // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
            return html(formattedValue);
        }

        // –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç
        const dateFields = ['d_edit', 'd_prod','timestamp'];

        // –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π boolean –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è      
        const booleanFields = ['is_admin', 'is_active', 'new_password'];

        new gridjs.Grid({
            columns: columns,
            server: {
                url: '/api/data',
                method: 'POST',
                headers: {
                'Content-Type': 'application/json',
                },
                body: JSON.stringify(queryFilterObject),
                
                then: (results) => {
                    results.data.forEach(row => {
                        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
                        dateFields.forEach(field => {
                            if (row[field]) {
                                row[field] = formatDateTime(new Date(row[field]));
                            }
                        });

                        // // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π True –∏ False
                        // booleanFields.forEach(field => {
                        //         row[field] = convertBooleanFields(row[field]);   
                        // });

                        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –±—É–ª–µ–≤–æ–≥–æ  –∑–Ω–∞—á–µ–Ω–∏—è True
                        booleanFields.forEach(field => {
                            if (row[field]) {
                                row[field] = convertBooleanFields(row[field]); 
                            }  
                        });
                    });
                    return results.data;
                },
                total: (results) => {
                    return results.total;
                },
            },
            search: {
                enabled: true,
                data: data.date,
            },
            sort: {
                enabled: true,
                multiColumn: true,
                data: data.date,
            },
            pagination: {
                server: {
                    url: (prev, page, limit) => {
                        return updateUrl(prev, { start: page * limit, length: limit });
                    },
                },
            },
            language: {
                'search': {
                    'placeholder': 'üîç –ü–æ–∏—Å–∫...'
                },
                'pagination': {
                    'previous': '‚¨ÖÔ∏è',
                    'next': '‚û°Ô∏è',
                    'results': () => '–ó–∞–ø–∏—Å–∏'
                }
            },
            fixedHeader: true,
            resizable: true,
        }).render(document.getElementById("table"));
    })
    .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error));
