// import { ruRU } from "gridjs/l10n";



// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è table_key —Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–æ–π
const tableName = document.getElementById('table').getAttribute('table-name');
const tableKey = document.getElementById('table').getAttribute('table-key');
console.log('–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è tableKey:', tableKey);
console.log('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã:', tableName);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–∞–ø—Ä–æ—Å–∞
const updateUrl = (prev, query) => {
    return (
        prev +
        (prev.indexOf("?") >= 0 ? "&" : "?") +
        new URLSearchParams(query).toString()
    );
};

var columns;
fetch(`/api/data?table_key=${tableKey}`)
    .then(response => response.json())
    .then(data => {
        columns = data.columns;
        const columnList = columns.map(column => column.id);

        const tableTitle = document.createElement('div');
        tableTitle.textContent = tableName;
        tableTitle.className = 'table-title';
        document.getElementById('table').insertAdjacentElement('beforebegin', tableTitle);

        data.data.forEach(row => {
            console.log(row);
        });

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        function formatDateTime(date) {
            return date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric' }) + '   ' + date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
        }

        // –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç
        const dateFields = ['d_edit', 'd_prod'];

        new gridjs.Grid({
            columns: columns,
            server: {
                url: `/api/data?table_key=${tableKey}`,
                then: (results) => {
                    results.data.forEach(row => {
                        dateFields.forEach(field => {
                            if (row[field]) {
                                row[field] = formatDateTime(new Date(row[field]));
                            }
                        });
                    });
                    return results.data;
                },
                total: (results) => {
                    return results.total;
                },
            },
            search: {
                enabled: true,
                data: data.date,
            },
            sort: {
                enabled: true,
                multiColumn: true,
                data: data.date,
            },
            pagination: {
                server: {
                    url: (prev, page, limit) => {
                        return updateUrl(prev, { start: page * limit, length: limit });
                    },
                },
            },
            language: {
                'search': {
                    'placeholder': 'üîç –ü–æ–∏—Å–∫...'
                },
                'pagination': {
                    'previous': '‚¨ÖÔ∏è',
                    'next': '‚û°Ô∏è',
                    'results': () => '–ó–∞–ø–∏—Å–∏'
                }
            },
            fixedHeader: true,
            resizable: true,
        }).render(document.getElementById("table"));
    })
    .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error));
