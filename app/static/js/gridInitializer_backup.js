// import { ruRU } from "gridjs/l10n";



// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è table_key —Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–æ–π
const tableName = document.getElementById('table').getAttribute('table-name');
const tableKey = document.getElementById('table').getAttribute('table-key');
console.log('–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è tableKey:', tableKey);
console.log('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã:', tableName);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–∞–ø—Ä–æ—Å–∞
const updateUrl = (prev, query) => {
    return (
        prev +
        (prev.indexOf("?") >= 0 ? "&" : "?") +
        new URLSearchParams(query).toString()
    );
};

// –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–æ–ª–±—Ü–∞—Ö —Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–æ–π
// var columnList;
var columns;
fetch(`/api/data?table_key=${tableKey}`)
    .then(response => response.json())
    .then(data => {
        columns = data.columns;
        // var columns = [{hidden: false, id: "id", name: "id"}, {id: "city", name: "–ì–æ—Ä–æ–¥"}, {id: "comment", name: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", sort: false}];
        const columnList = columns.map(column => column.id);
        console.log('–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: columnList:', columnList);
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö –¥–∞–Ω–Ω—ã—Ö
        data.data.forEach(row => {
            if (row.d_edit) {
                let dateEdit = new Date(row.d_edit);
                row.d_edit = dateEdit.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric' }) + ', ' + dateEdit.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
            }
            if (row.d_prod) {
                let dateProd = new Date(row.d_prod);
                row.d_prod = dateProd.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric' }) + ', ' + dateProd.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
            }
        });


        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞
        const tableTitle = document.createElement('div');
        tableTitle.textContent = tableName;
        tableTitle.className = 'table-title';
        // tableTitle.style.textAlign = 'right';
        document.getElementById('table').insertAdjacentElement('beforebegin', tableTitle);
        console.log('–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö columns:', columns);

        
        // –í—ã–≤–æ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        console.log('data.data:', data.data);
        data.data.forEach(row => {
            console.log(row);
        });
                
        
        
        new gridjs.Grid({
            // localized: ruRU, 
            columns: columns,
            data: data.data, // –ü–µ—Ä–µ–¥–∞—á–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            server: {
                url: `/api/data?table_key=${tableKey}`,
                then: (results) => {
                    console.log('–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞:', results);
                    return results.data;
                },
                total: (results) => {
                    console.log('–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', results.total);
                    return results.total;
                },
            },
            search: {
                enabled: true,
                server: {
                    url: (prev, search) => {
                        return updateUrl(prev, { search });
                    },
                },
            },

            sort: {
                enabled: true,
                multiColumn: true,
                
                server: {
                    url: (prev, columns) => {
                        console.log("Prev before function:", prev);
                        console.log("Columns before function:", columns);

                        const columnIds = columnList;
                        console.log('–ó–Ω–∞—á–µ–Ω–∏—è columnIds:', columnIds); // –í—ã–≤–æ–¥ array –≤ –∫–æ–Ω—Å–æ–ª—å —Å –ø–æ–º–æ—â—å—é console.log


                        const sort = columns.map(col => (col.direction === 1 ? "+" : "-") + columnIds[col.index]);
                        const result = updateUrl(prev, {sort});
                        console.log("Prev after function:", prev);
                        console.log("Columns after function:", columns);
                        console.log("Result after updateUrl:", result);
   

                        return result;

                        
                    },
                },
            },
            pagination: {
                server: {
                    url: (prev, page, limit) => {
                        return updateUrl(prev, { start: page * limit, length: limit });
                    },
                },
            },
            language: {
                'search': {
                  'placeholder': 'üîç Search...'
                },
                'pagination': {
                  'previous': '‚¨ÖÔ∏è',
                  'next': '‚û°Ô∏è',
                //   'showing': 'üòÉ Displaying',
                  'results': () => 'Records'
                }
              },



            fixedHeader: true,
            resizable: true,
        }).render(document.getElementById("table"));
    })
    .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error));
